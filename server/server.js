import express from 'express';
import oracledb from 'oracledb';
import bodyParser from 'body-parser';
import cors from 'cors';

const app = express();
const port = 3000;

app.use(cors());
app.use(bodyParser.json());

oracledb.initOracleClient(); // Only needed if using Oracle Instant Client

const dbConfig = {
  user: 'system',           // change if your DB user is different
  password: 'parth',        // your Oracle DB password
  connectString: 'localhost:1521/orclpdb' // your Oracle service name
};

app.post('/signup', async (req, res) => {
  const { fullname, email, password } = req.body;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Create table if not exists
    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE '
          CREATE TABLE users (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            fullname VARCHAR2(100),
            email VARCHAR2(100) UNIQUE,
            password VARCHAR2(100),
            PRIMARY KEY (id)
          )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF;
      END;
    `);

    await conn.execute(
      `INSERT INTO users (fullname, email, password) VALUES (:fullname, :email, :password)`,
      { fullname, email, password },
      { autoCommit: true }
    );

    res.json({ success: true, message: 'Signup successful' });
    await conn.close();
  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});


// User Login
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    const result = await conn.execute(
      `SELECT * FROM users WHERE email = :email AND password = :password`,
      { email, password }
    );

    if (result.rows.length > 0) {
      res.json({ success: true, message: 'Login successful' });
    } else {
      res.json({ success: false, message: 'Invalid email or password' });
    }

    await conn.close();
  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});

app.post('/saveCard', async (req, res) => {
  const { email, title, description } = req.body;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Optional: create table if not exists
    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE '
          CREATE TABLE student_cards(
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            email VARCHAR2(100),
            title VARCHAR2(100),
            description VARCHAR2(200),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id)
          )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF;
      END;
    `);

    await conn.execute(
      `INSERT INTO student_cards (email, title, description) VALUES (:email, :title, :description)`,
      { email, title, description },
      { autoCommit: true }
    );
    await conn.close();
    res.json({ success: true, message: 'Card saved successfully' });
    // await conn.close();
    console.log("It was success");
  } catch (err) {
        console.log("It didnt succesed");
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
    console.log("It didnt succesed");
  }
});


app.get('/getCards', async (req, res) => {
  const email = req.query.email;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    const result = await conn.execute(
      `SELECT title, description, TO_CHAR(created_at, 'YYYY-MM-DD HH24:MI:SS') AS created_at 
       FROM student_cards WHERE email = :email ORDER BY created_at DESC`,
      [email]
    );

    const cards = result.rows.map(row => ({
      title: row[0],
      description: row[1],
      createdAt: row[2]
    }));
    await conn.close();
    res.json({ success: true, cards });
    // await conn.close();
  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});



app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

