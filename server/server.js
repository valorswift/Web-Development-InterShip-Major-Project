import express from 'express';
import oracledb from 'oracledb';
import bodyParser from 'body-parser';
import cors from 'cors';

const app = express();
const port = 3000;

app.use(cors());
app.use(bodyParser.json());

oracledb.initOracleClient(); // Only needed if using Oracle Instant Client

const dbConfig = {
  user: 'system',           // change if your DB user is different
  password: 'parth',        // your Oracle DB password
  connectString: 'localhost:1521/orclpdb' // your Oracle service name
};

// User Signup
app.post('/signup', async (req, res) => {
  const { email, password } = req.body;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Create table if not exists (optional logic)
    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE '
          CREATE TABLE users (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            email VARCHAR2(100) UNIQUE,
            password VARCHAR2(100),
            PRIMARY KEY (id)
          )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF;
      END;
    `);

    await conn.execute(
      `INSERT INTO users (email, password) VALUES (:email, :password)`,
      { email, password },
      { autoCommit: true }
    );

    res.json({ success: true, message: 'Signup successful' });
    await conn.close();
  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});

// User Login
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    const result = await conn.execute(
      `SELECT * FROM users WHERE email = :email AND password = :password`,
      { email, password }
    );

    if (result.rows.length > 0) {
      res.json({ success: true, message: 'Login successful' });
    } else {
      res.json({ success: false, message: 'Invalid email or password' });
    }

    await conn.close();
  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
