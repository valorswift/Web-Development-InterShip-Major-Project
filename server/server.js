import express from 'express';
import oracledb from 'oracledb';
import bodyParser from 'body-parser';
import cors from 'cors';

const app = express();
const port = 3000;

// Enable CORS (allow frontend apps to access this API)
app.use(cors());
// Parse incoming JSON request bodies
app.use(bodyParser.json());

// Initialize Oracle client (needed if using Oracle Instant Client libraries)
oracledb.initOracleClient();

const dbConfig = {
  user: 'system',           // Oracle DB username
  password: 'tejas28',      // Oracle DB password
  connectString: 'localhost:1521/xepdb1' // Oracle DB service name/connection string
};

/* ------------------- USER SIGNUP ------------------- */
app.post('/signup', async (req, res) => {
  const { fullname, email, password } = req.body;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Create "users" table if it doesn't exist
    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE '
          CREATE TABLE users (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            fullname VARCHAR2(100),
            email VARCHAR2(100) UNIQUE,
            password VARCHAR2(100),
            PRIMARY KEY (id)
          )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF; -- Ignore "already exists" error
      END;
    `);

    // Insert new user
    await conn.execute(
      `INSERT INTO users (fullname, email, password) VALUES (:fullname, :email, :password)`,
      { fullname, email, password },
      { autoCommit: true }
    );

    res.json({ success: true, message: 'Signup successful' });
    await conn.close();
  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});

/* ------------------- USER LOGIN ------------------- */
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Verify user credentials
    const result = await conn.execute(
      `SELECT * FROM users WHERE email = :email AND password = :password`,
      { email, password }
    );

    if (result.rows.length > 0) {
      res.json({ success: true, message: 'Login successful' });
    } else {
      res.json({ success: false, message: 'Invalid email or password' });
    }

    await conn.close();
  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});

/* ------------------- SAVE CARD (folder) ------------------- */
app.post('/saveCard', async (req, res) => {
  const { email, title, description } = req.body;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Create "student_cards" table if it doesn't exist
    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE '
          CREATE TABLE student_cards(
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            email VARCHAR2(100),
            title VARCHAR2(100),
            description VARCHAR2(200),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id)
          )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF;
      END;
    `);

    // Insert new card and return ID
    const result = await conn.execute(
      `INSERT INTO student_cards (email, title, description) 
       VALUES (:email, :title, :description)
       RETURNING id INTO :id`,
      {
        email,
        title,
        description,
        id: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER }
      },
      { autoCommit: true }
    );

    const insertedId = result.outBinds.id[0];

    await conn.close();
    res.json({ success: true, id: insertedId, message: 'Card saved successfully' });

  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});

/* ------------------- GET CARDS ------------------- */
app.get('/getCards', async (req, res) => {
  const email = req.query.email;

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Fetch all cards for a user
    const result = await conn.execute(
      `SELECT id, title, description, 
              TO_CHAR(created_at, 'YYYY-MM-DD HH24:MI:SS') AS created_at 
       FROM student_cards 
       WHERE email = :email 
       ORDER BY created_at DESC`,
      [email]
    );

    const cards = result.rows.map(row => ({
      id: Number(row[0]),
      title: row[1],
      description: row[2],
      createdAt: row[3]
    }));

    res.json({ success: true, cards });
    await conn.close();
  } catch (err) {
    res.status(500).json({ success: false, message: 'Error: ' + err.message });
  }
});

/* ------------------- DELETE CARD ------------------- */
app.delete('/deleteCard/:id', async (req, res) => {
  const cardId = Number(req.params.id);

  if (isNaN(cardId)) {
    return res.status(400).json({ success: false, message: "Invalid card ID" });
  }

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Delete attendance and students linked to the card before deleting card
    await conn.execute(`DELETE FROM attendance WHERE card_id = :cardId`, { cardId });
    await conn.execute(`DELETE FROM students WHERE card_id = :cardId`, { cardId });

    await conn.execute(
      `DELETE FROM student_cards WHERE id = :cardId`,
      { cardId },
      { autoCommit: true }
    );

    await conn.close();
    res.json({ success: true, message: "Card and related student data deleted successfully" });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

/* ------------------- GET USER PROFILE DATA ------------------- */
app.get("/getProfileData", async (req, res) => {
  const email = (req.query.email || "").trim().toLowerCase();

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Fetch user details
    const userResult = await conn.execute(
      `SELECT fullname, email FROM users WHERE LOWER(email) = :email`,
      { email }
    );

    if (userResult.rows.length === 0) {
      await conn.close();
      return res.json({ success: false, message: "User not found" });
    }

    const fullname = userResult.rows[0][0];
    const userEmail = userResult.rows[0][1];

    // Count active folders (cards)
    const activeResult = await conn.execute(
      `SELECT COUNT(*) FROM student_cards WHERE LOWER(email) = :email`,
      { email }
    );

    await conn.close();

    res.json({
      success: true,
      fullname,
      email: userEmail,
      activeCount: activeResult.rows[0][0],
      profileImage: null // placeholder for future profile image
    });

  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

/* ------------------- STUDENT CRUD ------------------- */
// Get students of a card
app.get('/getStudents', async (req, res) => {
  const cardId = req.query.cardId;
  if (!cardId) return res.status(400).json({ success: false, message: "cardId is required" });

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Ensure students table exists
    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE '
          CREATE TABLE students (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            card_id NUMBER,
            name VARCHAR2(100),
            roll VARCHAR2(50),
            gmail VARCHAR2(100),
            address VARCHAR2(200),
            dom DATE,
            age NUMBER,
            phone VARCHAR2(20),
            gender VARCHAR2(10),
            PRIMARY KEY (id)
          )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF;
      END;
    `);

    const result = await conn.execute(
      `SELECT id, name, roll, gmail, address, TO_CHAR(dom, 'YYYY-MM-DD'), age, phone, gender
       FROM students WHERE card_id = :cardId ORDER BY id`,
      [cardId]
    );

    const students = result.rows.map(row => ({
      id: row[0],
      name: row[1],
      roll: row[2],
      gmail: row[3],
      address: row[4],
      dom: row[5],
      age: row[6],
      phone: row[7],
      gender: row[8],
    }));

    await conn.close();
    res.json({ success: true, students });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

// Add student
app.post('/addStudent', async (req, res) => {
  const { cardId, name, roll, gmail, address, dom, age, phone, gender } = req.body;

  if (!cardId || !name) {
    return res.status(400).json({ success: false, message: "cardId and name required" });
  }

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Insert student and return ID
    const result = await conn.execute(
      `INSERT INTO students (card_id, name, roll, gmail, address, dom, age, phone, gender)
       VALUES (:cardId, :name, :roll, :gmail, :address, TO_DATE(:dom, 'YYYY-MM-DD'), :age, :phone, :gender)
       RETURNING id INTO :id`,
      { cardId, name, roll, gmail, address, dom, age, phone, gender,
        id: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER }
      },
      { autoCommit: true }
    );

    const insertedId = result.outBinds.id[0];
    await conn.close();

    res.json({ success: true, studentId: insertedId });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

// Update student
app.put('/updateStudent/:id', async (req, res) => {
  const studentId = Number(req.params.id);
  const { cardId, name, roll, gmail, address, dom, age, phone, gender } = req.body;

  if (isNaN(studentId) || !cardId || !name) {
    return res.status(400).json({ success: false, message: "Invalid data" });
  }

  try {
    const conn = await oracledb.getConnection(dbConfig);

    await conn.execute(
      `UPDATE students SET
        card_id = :cardId,
        name = :name,
        roll = :roll,
        gmail = :gmail,
        address = :address,
        dom = TO_DATE(:dom, 'YYYY-MM-DD'),
        age = :age,
        phone = :phone,
        gender = :gender
      WHERE id = :studentId`,
      { cardId, name, roll, gmail, address, dom, age, phone, gender, studentId },
      { autoCommit: true }
    );

    await conn.close();
    res.json({ success: true, message: "Student updated" });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

// Delete student
app.delete('/deleteStudent/:id', async (req, res) => {
  const studentId = Number(req.params.id);
  if (isNaN(studentId)) {
    return res.status(400).json({ success: false, message: "Invalid student ID" });
  }

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Delete attendance first to avoid foreign key conflict
    await conn.execute(`DELETE FROM attendance WHERE student_id = :studentId`, { studentId });

    await conn.execute(
      `DELETE FROM students WHERE id = :studentId`,
      { studentId },
      { autoCommit: true }
    );

    await conn.close();
    res.json({ success: true, message: "Student deleted" });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

/* ------------------- GET ALL STUDENTS (for a user) ------------------- */
app.get('/getAllStudents', async (req, res) => {
  const email = req.query.email;
  if (!email) return res.status(400).json({ success: false, message: "Email required" });

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Fetch students belonging to user’s cards
    const result = await conn.execute(`
      SELECT s.id, s.name, s.gender
      FROM students s
      JOIN student_cards c ON s.card_id = c.id
      WHERE c.email = :email
    `, [email]);

    const students = result.rows.map(row => ({
      id: row[0],
      name: row[1],
      gender: row[2]
    }));

    await conn.close();
    res.json({ success: true, students });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

/* ------------------- ATTENDANCE ------------------- */
// Save attendance
app.post('/saveAttendance', async (req, res) => {
  const { cardId, date, attendanceData } = req.body;
  if (!cardId || !date || !attendanceData)
    return res.status(400).json({ success: false, message: "Invalid data" });

  try {
    const conn = await oracledb.getConnection(dbConfig);

    // Create attendance table if not exists
    await conn.execute(`
      BEGIN
        EXECUTE IMMEDIATE '
          CREATE TABLE attendance (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            student_id NUMBER NOT NULL,
            student_name VARCHAR2(100) NOT NULL,
            card_id NUMBER NOT NULL,
            status VARCHAR2(20) NOT NULL,
            attendance_date DATE DEFAULT SYSDATE,
            CONSTRAINT fk_student FOREIGN KEY (student_id) REFERENCES students(id)
          )';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -955 THEN RAISE; END IF;
      END;
    `);

    // Loop through each attendance record
    for (const a of attendanceData) {
      // Get student name
      const studentResult = await conn.execute(
        `SELECT name FROM students WHERE id = :id`,
        { id: a.student_id }
      );

      if (studentResult.rows.length === 0) continue;
      const studentName = studentResult.rows[0][0];

      // Check if attendance already exists for this student/date
      const exists = await conn.execute(
        `SELECT id FROM attendance 
         WHERE student_id = :student_id 
           AND card_id = :card_id 
           AND TRUNC(attendance_date) = TO_DATE(:attDate,'YYYY-MM-DD')`,
        { student_id: a.student_id, card_id: cardId, attDate: date }
      );

      if (exists.rows.length > 0) {
        // Update if already exists
        await conn.execute(
          `UPDATE attendance 
           SET status = :status, student_name = :student_name 
           WHERE id = :id`,
          { status: a.status, student_name: studentName, id: exists.rows[0][0] }
        );
      } else {
        // Insert new record
        await conn.execute(
          `INSERT INTO attendance (student_id, student_name, card_id, status, attendance_date)
           VALUES (:student_id, :student_name, :card_id, :status, TO_DATE(:attDate,'YYYY-MM-DD'))`,
          { student_id: a.student_id, student_name: studentName, card_id: cardId, status: a.status, attDate: date }
        );
      }
    }

    await conn.commit();
    await conn.close();
    res.json({ success: true, message: "Attendance saved successfully" });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

// Get attendance
app.get("/getAttendance", async (req, res) => {
  const { cardId, date } = req.query;
  if (!cardId || !date) {
    return res.status(400).json({ success: false, message: "Missing cardId or date" });
  }

  try {
    const conn = await oracledb.getConnection(dbConfig);

    const result = await conn.execute(
      `SELECT student_id, status 
       FROM attendance 
       WHERE card_id = :cid 
       AND TRUNC(attendance_date) = TO_DATE(:d,'YYYY-MM-DD')`,
      { cid: Number(cardId), d: date }
    );

    // Convert rows into a map { studentId: status }
    const attendance = {};
    for (const row of result.rows) {
      attendance[row[0]] = row[1];
    }

    await conn.close();
    res.json({ success: true, attendance });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
});

/* ------------------- START SERVER ------------------- */
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
